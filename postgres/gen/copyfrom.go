// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: copyfrom.go

package gen

import (
	"context"
)

// iteratorForInsertTrips implements pgx.CopyFromSource.
type iteratorForInsertTrips struct {
	rows                 []InsertTripsParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertTrips) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertTrips) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TripID,
		r.rows[0].CarID,
		r.rows[0].DriverID,
		r.rows[0].CarNumber,
		r.rows[0].DeviceID,
		r.rows[0].TripActive,
		r.rows[0].StartMessageID,
		r.rows[0].StartDate,
		r.rows[0].StartLatitude,
		r.rows[0].StartLongitude,
		r.rows[0].StartOdo,
		r.rows[0].StopMessageID,
		r.rows[0].StopDate,
		r.rows[0].StopLatitude,
		r.rows[0].StopLongitude,
		r.rows[0].StopOdo,
		r.rows[0].TripDuration,
		r.rows[0].TripDistance,
		r.rows[0].TripDurationNight,
		r.rows[0].TripDistanceNight,
	}, nil
}

func (r iteratorForInsertTrips) Err() error {
	return nil
}

func (q *Queries) InsertTrips(ctx context.Context, arg []InsertTripsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"trips"}, []string{"trip_id", "car_id", "driver_id", "car_number", "device_id", "trip_active", "start_message_id", "start_date", "start_latitude", "start_longitude", "start_odo", "stop_message_id", "stop_date", "stop_latitude", "stop_longitude", "stop_odo", "trip_duration", "trip_distance", "trip_duration_night", "trip_distance_night"}, &iteratorForInsertTrips{rows: arg})
}
